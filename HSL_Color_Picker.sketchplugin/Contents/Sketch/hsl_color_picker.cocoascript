@import "MochaJSDelegate.js";

var onRun = function(context) {

    var doc = context.document;
    var selection = context.selection;

    var initColor = NSColor.redColor();

    // Get selected layer color.
    if (selection.count() > 0) {
        var layer = selection.firstObject();
        if (getFillColor(layer)) {
            initColor = getFillColor(layer);
        }
    }

    // log(initColor)
    log("<<<<<" + nsColorToRGBA(initColor))

    // ColorPicker main window
    var title = "HSL Color Picker";
    var identifier = "com.ashung.hung.hsl_color_picker";
    var threadDictionary = NSThread.mainThread().threadDictionary();

    var colorPicker = threadDictionary[identifier] ? threadDictionary[identifier] : NSPanel.alloc().init();

    // Window size
    colorPicker.setFrame_display(NSMakeRect(0, 0, 240, 150), true);

    colorPicker.setStyleMask(NSTexturedBackgroundWindowMask | NSTitledWindowMask | NSClosableWindowMask);
    colorPicker.setBackgroundColor(NSColor.whiteColor());

    // Only show close button
    colorPicker.standardWindowButton(NSWindowMiniaturizeButton).setHidden(true);
    colorPicker.standardWindowButton(NSWindowZoomButton).setHidden(true);

    // Titlebar
    colorPicker.setTitle(title);
    colorPicker.setTitlebarAppearsTransparent(true);

    colorPicker.becomeKeyWindow();
    colorPicker.setLevel(NSFloatingWindowLevel);

    threadDictionary[identifier] = colorPicker;

    // Long-running script
    COScript.currentCOScript().setShouldKeepAround_(true);

    // Add Web View to window
    var webView = WebView.alloc().initWithFrame(NSMakeRect(0, -24, 240, 150));
    var windowObject = webView.windowScriptObject();
    var delegate = new MochaJSDelegate({
        "webView:didFinishLoadForFrame:" : (function(webView, webFrame) {

            var rgba = nsColorToRGBA(initColor);
            windowObject.evaluateWebScript(
                'updateInterfaceWithRGBA(' + rgba[0] + ', ' + rgba[1] + ', ' + rgba[2] + ', ' + rgba[3] + ')'
            );

        }),
        "webView:didChangeLocationWithinPageForFrame:" : (function(webView, webFrame) {
            var locationHash = windowObject.evaluateWebScript("window.location.hash");
            if (/^#\d+(-\d+){3}/.test(locationHash)) {
                var colorFromWebView = locationHash.replace("#", "").split("-");
                var MSColorFormWebView = rgbaToMSColor(
                    colorFromWebView[0],
                    colorFromWebView[1],
                    colorFromWebView[2],
                    colorFromWebView[3]
                );
                setFillColor(layer, MSColorFormWebView);

                if (/-addToDocumentColors$/.test(locationHash)) {
                    addColorToDocumentColors(context, MSColorFormWebView);
                }
            }
        })
    });

    webView.setFrameLoadDelegate_(delegate.getClassInstance());
    webView.setMainFrameURL_(context.plugin.urlForResourceNamed("hsl.html").path());

    colorPicker.contentView().addSubview(webView);
    colorPicker.center();
    colorPicker.makeKeyAndOrderFront(nil);

}

/**
 * @param    NSColor    nscolor
 * @return   Array      [r[0-255], g[0-255], b[0-255], a[0-100]]
 */
function nsColorToRGBA(nscolor) {
    var r = Math.round(nscolor.red() * 255),
        g = Math.round(nscolor.green() * 255),
        b = Math.round(nscolor.blue() * 255),
        a = Math.round(nscolor.alpha() * 100);
    return [r, g, b, a];
}

/**
 * @param    Number    r    [0-255]
 * @param    Number    g    [0-255]
 * @param    Number    b    [0-255]
 * @param    Number    a    [0-100]
 * @return   MSColor
 */
function rgbaToMSColor(r, g, b, a) {
    var color = MSColor.alloc().init();
    color.setRed(r / 255);
    color.setGreen(g / 255);
    color.setBlue(b / 255);
    color.setAlpha(a / 100);
    return color;
}

/**
 * @param    MSLayer    layer
 */
function getFillColor(layer) {
    if (layer.class() == "MSShapeGroup") {
        var fills = layer.style().enabledFills();
        if (fills.count() > 0) {
            if (fills.lastObject().fillType() == 0) {
                return fills.lastObject().color();
            } else {
                return null;
            }
        } else {
            return null;
        }
    }
    if (layer.class() == "MSTextLayer") {
        return layer.textColor();
    }
}

/**
 * @param    MSLayer    layer
 * @param    MSColor    color
 */
function setFillColor(layer, color) {
    if (layer.class() == "MSShapeGroup") {
        var fills = layer.style().enabledFills();
        if (fills.count() > 0 && fills.lastObject().fillType() == 0) {
            fills.lastObject().setColor(color);
        } else {
            var fill = layer.style().addStylePartOfType(0);
            fill.setFillType(0);
            fills.lastObject().setColor(color);
        }
    }
    if (layer.class() == "MSTextLayer") {
        layer.setTextColor(color);
    }
}

function addColorToDocumentColors(context, mscolor) {
    var documentColors = context.document.documentData().assets().colors();
    documentColors.addObject(mscolor);
}
